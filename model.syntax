pgm         ::= {begin-stack} {begin-symboltbl} stms {end-symboltbl} {stack-result} {end-stack} 
stms        ::= stm . 
            ::= stm {stack-pop} ; stms 
stm         ::= expr 
expr        ::= NUMBER {stack-pushnumber[$]} 
            ::= funcall 
            ::= varuse 
            ::= lambda 
funcall     ::= NAME {symboltbl-check[$]} {begin-call} argList {call-named[$]} {end-call} 
            ::= ( expr ) {begin-call} argList {call-stack} {end-call} 
argList     ::= ( ) 
            ::= ( args ) 
args        ::= expr , args 
            ::= expr {call-push[stack]} 
varuse      ::= NAME {symboltbl-check[$]} {stack-pushnamed[symboltbl]} 
lambda      ::= captureList paramList {begin-symboltbl[lambda]} -> type {lambda-type[$]} {begin-jmp} stms {jmp-here} {end-jmp} 
captureList ::= [ {begin-lambda} ] 
            ::= [ {begin-lambda} captures ] 
captures    ::= NAME {lambda-add-capture[$]} , captures 
            ::= NAME {lambda-add-capture[$]} 
paramlist   ::= ( ) 
            ::= ( params ) 
paramList   ::= param , params 
            ::= param 
param       ::= NAME {lambda-add-param[$]} : type {lambda-param-type[type]} {end-type} 
type        ::= NUMBER {begin-type[$]} 
            ::= aparamList -> type {signature-type[type]} {end-type} {begin-type[signature]} {end-signature} 
aparamList  ::= ( {begin-signature} ) 
            ::= ( {begin-signature} aparamList ) 
aparams     ::= type {signature-add[type]} {end-type} , aparams 
            ::= type {signature-add[type]} {end-type} 
NAME        <-- /([\w_][\w_\d]*)/
NUMBER      <-- /([\d][_\d]*)/