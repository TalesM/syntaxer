pgm         ::= {++stack} {++symboltbl} stms {--symboltbl} {stack-result} {--stack} 
stms        ::= stm ; stms 
            ::= stm ; {stack-pop} 
stm         ::= expr 
expr        ::= NUMBER {stack-pushnumber[$]} 
            ::= funcall 
            ::= varuse 
            ::= lambda 
funcall     ::= NAME {symboltbl-check[$]} {++call} argList {call-named} {--call} 
            ::= ( expr ) {++call} argList {call-stack} {--call} 
argList     ::= ( ) 
            ::= ( args ) 
args        ::= expr , args 
            ::= expr {call-push[stack]} 
varuse      ::= NAME {symboltbl-check[$]} {stack-pushnamed[symboltbl]} 
lambda      ::= captureList paramList {++symboltbl[lambda]} -> type {lambda-type[$]} {++jmp} stms {jmp-here} {--jmp} 
captureList ::= [ {++lambda} ] 
            ::= [ {++lambda} captures ] 
captures    ::= NAME {lambda-add-capture[$]} , captures 
            ::= NAME {lambda-add-capture[$]} 
paramList   ::= ( ) 
            ::= ( params ) 
params      ::= param , params 
            ::= param 
param       ::= NAME {lambda-add-param[$]} : type {lambda-param-type[type]} {--type} 
type        ::= INT {++type[$]} 
            ::= aparamList -> type {signature-type[type]} {--type} {++type[signature]} {--signature} 
aparamList  ::= ( {++signature} ) 
            ::= ( {++signature} aparamList ) 
aparams     ::= type {signature-add[type]} {--type} , aparams 
            ::= type {signature-add[type]} {--type} 
INT         <-- /(int)\b/
NAME        <-- /([A-Za-z_][\w_\d]*)/
NUMBER      <-- /([\d][_\d]*)/
            <-- /\s+|#[^\n]*\n/